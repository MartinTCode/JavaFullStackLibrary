<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.javafullstacklibrary</groupId>
    <artifactId>javafullstacklibrary</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <!-- Dependency versions -->
        <java.version>21</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <javafx.version>23.0.1</javafx.version>
        <jUnit.version>5.9.2</jUnit.version>
        <postgresql.version>42.5.4</postgresql.version>
        <jkartaJPA.version>3.1.0</jkartaJPA.version>
        <hibernate.version>6.6.13.Final</hibernate.version>
        <!-- Plugin versions -->
        <mResourceP.version>3.3.0</mResourceP.version>
        <mShadeP.version>3.5.0</mShadeP.version>
        <mCompilerP.version>3.10.1</mCompilerP.version>
        <mJavafxP.version>0.0.8</mJavafxP.version>
    </properties>

    <dependencies>
        <!-- JavaFX -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>


        <!-- PostgreSQL Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <!-- Connection Pool -->
        <!-- not included due to project parameters, only running on localhost.
        Should be included if project grows into a real-world application -->

        <!-- Testing with JUnit Jupiter (most widely used Java testing framework)-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${jUnit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- JPA API -->
        <!-- JPA (maven:JavaPersistanceAPI) moved to Jakarta Persistence API-->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>${jkartaJPA.version}</version>
        </dependency>

        <!-- Hibernate (JPA Implementation) -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${mCompilerP.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <!-- JavaFX Plugin -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${mJavafxP.version}</version>
                <configuration>
                    <!-- entry point for JavaFX -->
                    <mainClass>com.javafullstacklibrary.frontend.Launcher</mainClass>
                    <!-- native maven dependencies for terminal formatting (JansiLoader) use restrictive dependencies -->
                    <!--jvmArgs not supported by v. 0.0.8 which is latest avaliable via maven...-->
                    <!-- JavaFX modules to be included in the build (even though project is not modular, JavaFX is.)-->
                    <!-- modules argument not supported by v. 0.0.8 -->
                </configuration>
            </plugin>

            <!-- Build executable JAR, points to main -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <!-- latest version is 3.5.0, latest LTS is 3.4.1, revert if needed--> 
                <version>${mShadeP.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <!-- Specifies the main class in the manifest file of the shaded JAR, enabling it to be executed with 'java -jar'. -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.javafullstacklibrary.frontend.Launcher</mainClass>
                                </transformer>
                                <!-- Merges the reflection configuration file for general use -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/substrate/config/reflectionconfig.json</resource>
                                </transformer>
                                <!-- Merges the reflection configuration file for Android (aarch64) -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/substrate/config/reflectionconfig-aarch64-android.json</resource>
                                </transformer>
                                <!-- Merges the reflection configuration file for iOS (arm64) -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/substrate/config/reflectionconfig-arm64-ios.json</resource>
                                </transformer>
                                <!-- Merges the reflection configuration file for iOS (x86_64) -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/substrate/config/reflectionconfig-x86_64-ios.json</resource>
                                </transformer>
                                <!-- Merges the resource bundles configuration file -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/substrate/config/resourcebundles</resource>
                                </transformer>
                            </transformers>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <!-- Exclude all signature files from shaded JAR since shading will invalidate them. -->
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                        <!-- Exlude manifest from shaded JAR since they conflict.-->
                                        <exclude>META-INF/MANIFEST.MF</exclude>
                                        <!-- Exclude module-info.class since project is not using module system. -->
                                        <exclude>module-info.class</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Copy resources, viz. documentation into build deliverable-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${mResourceP.version}</version>
                <executions>
                    <execution>
                        <id>copy-docs</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- Output directory for copied resources -->
                            <outputDirectory>${project.build.directory}/classes/docs</outputDirectory>
                            <resources>
                                <resource>
                                    <!-- Directory containing the resources to be copied -->
                                    <directory>${project.basedir}/docs</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
